//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace FileReaderAPI.NextWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NextTransactionWS_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS")]
    public partial class NextTransactionWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SetActionCodingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCodingResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertNextTransactionHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertNextSalesEntriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertNextPaymentEntriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveNextTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTransactionHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertNextChargesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNextStatementOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NextTransactionWS() {
            this.Url = global::FileReaderAPI.Properties.Settings.Default.FileReaderAPI_NextWebService_NextTransactionWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetActionCodingCompletedEventHandler SetActionCodingCompleted;
        
        /// <remarks/>
        public event GetCodingResultCompletedEventHandler GetCodingResultCompleted;
        
        /// <remarks/>
        public event InsertNextTransactionHeaderCompletedEventHandler InsertNextTransactionHeaderCompleted;
        
        /// <remarks/>
        public event InsertNextSalesEntriesCompletedEventHandler InsertNextSalesEntriesCompleted;
        
        /// <remarks/>
        public event InsertNextPaymentEntriesCompletedEventHandler InsertNextPaymentEntriesCompleted;
        
        /// <remarks/>
        public event RemoveNextTransactionsCompletedEventHandler RemoveNextTransactionsCompleted;
        
        /// <remarks/>
        public event CheckTransactionHeaderCompletedEventHandler CheckTransactionHeaderCompleted;
        
        /// <remarks/>
        public event InsertNextChargesCompletedEventHandler InsertNextChargesCompleted;
        
        /// <remarks/>
        public event CreateNextStatementCompletedEventHandler CreateNextStatementCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS:SetActionCoding", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", ResponseElementName="SetActionCoding_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetActionCoding(int pAction, int pEncoding, ref string pRequest_In) {
            object[] results = this.Invoke("SetActionCoding", new object[] {
                        pAction,
                        pEncoding,
                        pRequest_In});
            pRequest_In = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetActionCodingAsync(int pAction, int pEncoding, string pRequest_In) {
            this.SetActionCodingAsync(pAction, pEncoding, pRequest_In, null);
        }
        
        /// <remarks/>
        public void SetActionCodingAsync(int pAction, int pEncoding, string pRequest_In, object userState) {
            if ((this.SetActionCodingOperationCompleted == null)) {
                this.SetActionCodingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetActionCodingOperationCompleted);
            }
            this.InvokeAsync("SetActionCoding", new object[] {
                        pAction,
                        pEncoding,
                        pRequest_In}, this.SetActionCodingOperationCompleted, userState);
        }
        
        private void OnSetActionCodingOperationCompleted(object arg) {
            if ((this.SetActionCodingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetActionCodingCompleted(this, new SetActionCodingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS:GetCodingResult", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", ResponseElementName="GetCodingResult_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string GetCodingResult() {
            object[] results = this.Invoke("GetCodingResult", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCodingResultAsync() {
            this.GetCodingResultAsync(null);
        }
        
        /// <remarks/>
        public void GetCodingResultAsync(object userState) {
            if ((this.GetCodingResultOperationCompleted == null)) {
                this.GetCodingResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCodingResultOperationCompleted);
            }
            this.InvokeAsync("GetCodingResult", new object[0], this.GetCodingResultOperationCompleted, userState);
        }
        
        private void OnGetCodingResultOperationCompleted(object arg) {
            if ((this.GetCodingResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCodingResultCompleted(this, new GetCodingResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS:InsertNextTransactionHe" +
            "ader", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", ResponseElementName="InsertNextTransactionHeader_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertNextTransactionHeader(string _receiptNo, string _branchCode, string _staffID, string _date, string _time, decimal _grossAmount, decimal _discountAmount, decimal _payment) {
            this.Invoke("InsertNextTransactionHeader", new object[] {
                        _receiptNo,
                        _branchCode,
                        _staffID,
                        _date,
                        _time,
                        _grossAmount,
                        _discountAmount,
                        _payment});
        }
        
        /// <remarks/>
        public void InsertNextTransactionHeaderAsync(string _receiptNo, string _branchCode, string _staffID, string _date, string _time, decimal _grossAmount, decimal _discountAmount, decimal _payment) {
            this.InsertNextTransactionHeaderAsync(_receiptNo, _branchCode, _staffID, _date, _time, _grossAmount, _discountAmount, _payment, null);
        }
        
        /// <remarks/>
        public void InsertNextTransactionHeaderAsync(string _receiptNo, string _branchCode, string _staffID, string _date, string _time, decimal _grossAmount, decimal _discountAmount, decimal _payment, object userState) {
            if ((this.InsertNextTransactionHeaderOperationCompleted == null)) {
                this.InsertNextTransactionHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertNextTransactionHeaderOperationCompleted);
            }
            this.InvokeAsync("InsertNextTransactionHeader", new object[] {
                        _receiptNo,
                        _branchCode,
                        _staffID,
                        _date,
                        _time,
                        _grossAmount,
                        _discountAmount,
                        _payment}, this.InsertNextTransactionHeaderOperationCompleted, userState);
        }
        
        private void OnInsertNextTransactionHeaderOperationCompleted(object arg) {
            if ((this.InsertNextTransactionHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertNextTransactionHeaderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS:InsertNextSalesEntries", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", ResponseElementName="InsertNextSalesEntries_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertNextSalesEntries(string _receiptNo, string _branchCode, string _staffID, string _date, string _time, decimal _grossAmount, decimal _discountAmount, decimal _payment, int _qty, string _nextItemOpt, int _saleItemNo, decimal _vatPercentage) {
            this.Invoke("InsertNextSalesEntries", new object[] {
                        _receiptNo,
                        _branchCode,
                        _staffID,
                        _date,
                        _time,
                        _grossAmount,
                        _discountAmount,
                        _payment,
                        _qty,
                        _nextItemOpt,
                        _saleItemNo,
                        _vatPercentage});
        }
        
        /// <remarks/>
        public void InsertNextSalesEntriesAsync(string _receiptNo, string _branchCode, string _staffID, string _date, string _time, decimal _grossAmount, decimal _discountAmount, decimal _payment, int _qty, string _nextItemOpt, int _saleItemNo, decimal _vatPercentage) {
            this.InsertNextSalesEntriesAsync(_receiptNo, _branchCode, _staffID, _date, _time, _grossAmount, _discountAmount, _payment, _qty, _nextItemOpt, _saleItemNo, _vatPercentage, null);
        }
        
        /// <remarks/>
        public void InsertNextSalesEntriesAsync(string _receiptNo, string _branchCode, string _staffID, string _date, string _time, decimal _grossAmount, decimal _discountAmount, decimal _payment, int _qty, string _nextItemOpt, int _saleItemNo, decimal _vatPercentage, object userState) {
            if ((this.InsertNextSalesEntriesOperationCompleted == null)) {
                this.InsertNextSalesEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertNextSalesEntriesOperationCompleted);
            }
            this.InvokeAsync("InsertNextSalesEntries", new object[] {
                        _receiptNo,
                        _branchCode,
                        _staffID,
                        _date,
                        _time,
                        _grossAmount,
                        _discountAmount,
                        _payment,
                        _qty,
                        _nextItemOpt,
                        _saleItemNo,
                        _vatPercentage}, this.InsertNextSalesEntriesOperationCompleted, userState);
        }
        
        private void OnInsertNextSalesEntriesOperationCompleted(object arg) {
            if ((this.InsertNextSalesEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertNextSalesEntriesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS:InsertNextPaymentEntrie" +
            "s", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", ResponseElementName="InsertNextPaymentEntries_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertNextPaymentEntries(string _tenderType, decimal _tenderAmount, decimal _amountInCurrency, string _date, string _time, string _salesPerson, string _storeNo, string _receiptNo, int _saleItemNo, string _NavCardCode) {
            this.Invoke("InsertNextPaymentEntries", new object[] {
                        _tenderType,
                        _tenderAmount,
                        _amountInCurrency,
                        _date,
                        _time,
                        _salesPerson,
                        _storeNo,
                        _receiptNo,
                        _saleItemNo,
                        _NavCardCode});
        }
        
        /// <remarks/>
        public void InsertNextPaymentEntriesAsync(string _tenderType, decimal _tenderAmount, decimal _amountInCurrency, string _date, string _time, string _salesPerson, string _storeNo, string _receiptNo, int _saleItemNo, string _NavCardCode) {
            this.InsertNextPaymentEntriesAsync(_tenderType, _tenderAmount, _amountInCurrency, _date, _time, _salesPerson, _storeNo, _receiptNo, _saleItemNo, _NavCardCode, null);
        }
        
        /// <remarks/>
        public void InsertNextPaymentEntriesAsync(string _tenderType, decimal _tenderAmount, decimal _amountInCurrency, string _date, string _time, string _salesPerson, string _storeNo, string _receiptNo, int _saleItemNo, string _NavCardCode, object userState) {
            if ((this.InsertNextPaymentEntriesOperationCompleted == null)) {
                this.InsertNextPaymentEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertNextPaymentEntriesOperationCompleted);
            }
            this.InvokeAsync("InsertNextPaymentEntries", new object[] {
                        _tenderType,
                        _tenderAmount,
                        _amountInCurrency,
                        _date,
                        _time,
                        _salesPerson,
                        _storeNo,
                        _receiptNo,
                        _saleItemNo,
                        _NavCardCode}, this.InsertNextPaymentEntriesOperationCompleted, userState);
        }
        
        private void OnInsertNextPaymentEntriesOperationCompleted(object arg) {
            if ((this.InsertNextPaymentEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertNextPaymentEntriesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS:RemoveNextTransactions", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", ResponseElementName="RemoveNextTransactions_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveNextTransactions(int _receiptNo) {
            this.Invoke("RemoveNextTransactions", new object[] {
                        _receiptNo});
        }
        
        /// <remarks/>
        public void RemoveNextTransactionsAsync(int _receiptNo) {
            this.RemoveNextTransactionsAsync(_receiptNo, null);
        }
        
        /// <remarks/>
        public void RemoveNextTransactionsAsync(int _receiptNo, object userState) {
            if ((this.RemoveNextTransactionsOperationCompleted == null)) {
                this.RemoveNextTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveNextTransactionsOperationCompleted);
            }
            this.InvokeAsync("RemoveNextTransactions", new object[] {
                        _receiptNo}, this.RemoveNextTransactionsOperationCompleted, userState);
        }
        
        private void OnRemoveNextTransactionsOperationCompleted(object arg) {
            if ((this.RemoveNextTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveNextTransactionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS:CheckTransactionHeader", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", ResponseElementName="CheckTransactionHeader_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckTransactionHeader(int transactionNumber) {
            this.Invoke("CheckTransactionHeader", new object[] {
                        transactionNumber});
        }
        
        /// <remarks/>
        public void CheckTransactionHeaderAsync(int transactionNumber) {
            this.CheckTransactionHeaderAsync(transactionNumber, null);
        }
        
        /// <remarks/>
        public void CheckTransactionHeaderAsync(int transactionNumber, object userState) {
            if ((this.CheckTransactionHeaderOperationCompleted == null)) {
                this.CheckTransactionHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTransactionHeaderOperationCompleted);
            }
            this.InvokeAsync("CheckTransactionHeader", new object[] {
                        transactionNumber}, this.CheckTransactionHeaderOperationCompleted, userState);
        }
        
        private void OnCheckTransactionHeaderOperationCompleted(object arg) {
            if ((this.CheckTransactionHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTransactionHeaderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS:InsertNextCharges", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", ResponseElementName="InsertNextCharges_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertNextCharges(string _receiptNo, string _branchCode, string _date, string _time, decimal _amount, string _sundryCode) {
            this.Invoke("InsertNextCharges", new object[] {
                        _receiptNo,
                        _branchCode,
                        _date,
                        _time,
                        _amount,
                        _sundryCode});
        }
        
        /// <remarks/>
        public void InsertNextChargesAsync(string _receiptNo, string _branchCode, string _date, string _time, decimal _amount, string _sundryCode) {
            this.InsertNextChargesAsync(_receiptNo, _branchCode, _date, _time, _amount, _sundryCode, null);
        }
        
        /// <remarks/>
        public void InsertNextChargesAsync(string _receiptNo, string _branchCode, string _date, string _time, decimal _amount, string _sundryCode, object userState) {
            if ((this.InsertNextChargesOperationCompleted == null)) {
                this.InsertNextChargesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertNextChargesOperationCompleted);
            }
            this.InvokeAsync("InsertNextCharges", new object[] {
                        _receiptNo,
                        _branchCode,
                        _date,
                        _time,
                        _amount,
                        _sundryCode}, this.InsertNextChargesOperationCompleted, userState);
        }
        
        private void OnInsertNextChargesOperationCompleted(object arg) {
            if ((this.InsertNextChargesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertNextChargesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS:CreateNextStatement", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", ResponseElementName="CreateNextStatement_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/NextTransactionWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateNextStatement(string _TransactionDate, int _StoreNumber, decimal _Bank) {
            this.Invoke("CreateNextStatement", new object[] {
                        _TransactionDate,
                        _StoreNumber,
                        _Bank});
        }
        
        /// <remarks/>
        public void CreateNextStatementAsync(string _TransactionDate, int _StoreNumber, decimal _Bank) {
            this.CreateNextStatementAsync(_TransactionDate, _StoreNumber, _Bank, null);
        }
        
        /// <remarks/>
        public void CreateNextStatementAsync(string _TransactionDate, int _StoreNumber, decimal _Bank, object userState) {
            if ((this.CreateNextStatementOperationCompleted == null)) {
                this.CreateNextStatementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNextStatementOperationCompleted);
            }
            this.InvokeAsync("CreateNextStatement", new object[] {
                        _TransactionDate,
                        _StoreNumber,
                        _Bank}, this.CreateNextStatementOperationCompleted, userState);
        }
        
        private void OnCreateNextStatementOperationCompleted(object arg) {
            if ((this.CreateNextStatementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNextStatementCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SetActionCodingCompletedEventHandler(object sender, SetActionCodingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetActionCodingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetActionCodingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pRequest_In {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetCodingResultCompletedEventHandler(object sender, GetCodingResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCodingResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCodingResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void InsertNextTransactionHeaderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void InsertNextSalesEntriesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void InsertNextPaymentEntriesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void RemoveNextTransactionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CheckTransactionHeaderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void InsertNextChargesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CreateNextStatementCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591